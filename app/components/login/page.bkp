"use client";

import { Dispatch, FunctionComponent, SetStateAction, useState } from "react";
import FormManager from "../utils/form/FormManager";
import authService from "@/app/services/authService";
import { signIn } from "next-auth/react";
import { useRouter, useSearchParams } from "next/navigation";
import styles from "./Login.module.css";

type LoginProps = {
    onLogIn: Dispatch<SetStateAction<boolean>>;
};

const Login: FunctionComponent<LoginProps> = ({ onLogIn }) => {
    const [hasAccount, setHasAccount] = useState<boolean>(true);
    const [Loading, setLoading] = useState<boolean>(false);
    const [error, setError] = useState("");
    const router = useRouter();
    const searchParams = useSearchParams();
    const callbackUrl = searchParams.get("callbackUrl") || "/dashboard";

    function handleOptionChange() {
        setHasAccount((prevState) => !prevState);
        setError("");
    }

    async function handleSubmit(answers: formAnswersType[]): Promise<void> {
        const emailAnswer = answers
            .filter((answer) => answer.id === "email")
            .at(0);
        const passwordAnswer = answers
            .filter((answer) => answer.id === "password")
            .at(0);
        const email = emailAnswer?.value as string;
        const password = passwordAnswer?.value as string;

        if (!email || !password) {
            setError("Error on form answers");
            return;
        }

        setLoading(true);
        if (!hasAccount) {
            const res = await authService.createUser({
                email,
                password,
            });
            if (!res.ok) {
                setError(res.errorMessage);
                setLoading(false);
                return;
            }
            /*const responseDb = await dbService.createUserCollection(email);
            if (!responseDb.ok) {
                setErrorMsg(responseDb.errorMessage);
                return;
            }
            if (responseAuth.ok && responseDb.ok) {
                onLogIn(true);
            }*/
        }
        try {
            const res = await signIn("credentials", {
                redirect: false,
                email: email,
                password: password,
                callbackUrl,
            });
            if (!res?.error) {
                router.push(callbackUrl);
            } else {
                setError(res?.error ?? "invalid email or password");
            }
            setLoading(false);
        } catch (error: any) {
            setLoading(false);
            setError(error);
        }
    }

    return (
        <div className={styles.loginContainer}>
            <button onClick={handleOptionChange}>
                {hasAccount
                    ? "I don't have an account yet"
                    : "I have an account"}
            </button>
            <FormManager
                inputs={[
                    {
                        type: "mail",
                        id: "email",
                        placeholder: "email",
                        isOptional: false,
                    },
                    {
                        type: "password",
                        id: "password",
                        placeholder: "password",
                        isOptional: false,
                    },
                ]}
                submitCallback={handleSubmit}
                submitText={hasAccount ? "Log in" : "Sign in"}
                Loading={Loading}
                serverErrorMsg={error}
            />
        </div>
    );
};

export default Login;
